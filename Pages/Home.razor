@page "/"

@using MegaSenaBlazor.Models
@using MegaSenaBlazor.Services

@inject LocalStorageService LocalStorageService

@inject MegaSenaService MegaSenaService
@inject IJSRuntime JS

<div class="container">
    <audio id="plimSound" src="sounds/plim.mp3" preload="auto"></audio>
    <h2>Gerador da Sorte 🍀</h2>
    <h4>Último Resultado da Mega-Sena</h4>

    @if (isLoadingApi)
    {
        <div class="loading-area">
            <div class="clover-loading-group">
                @for (int i = 0; i < 6; i++)
                {
                    <div class="clover-small">🍀</div>
                }
            </div>
            <div class="loading-message">Buscando último sorteio...</div>
        </div>
    }
    else if (latestResult is not null)
    {
        <div class="result-detail">
            <p><strong>Concurso:</strong> @latestResult.DrawNumber</p>
            <p><strong>Data:</strong> @latestResult.Date</p>

            <div class="numbers">
                @foreach (var number in latestResult.Numbers.OrderBy(n => n))
                {
                    <div class="number-ball">@number</div>
                }
            </div>

            <p><strong>Acumulou:</strong>
                <span style="color:@(latestResult.IsAccumulated ? "green" : "red"); font-weight:bold;">
                    @(latestResult.IsAccumulated ? "SIM" : "NÃO")
                </span>
            </p>

            <p><strong>Próximo Sorteio:</strong> @latestResult.NextDrawDate</p>

            <p><strong>Valor Acumulado:</strong> @FormatPrize(latestResult.NextAccumulatedDrawPrize)</p>
            <p><strong>Valor Estimado do @latestResult.DrawNumber:</strong> @FormatPrize(latestResult.NextDrawPrize)</p>
        </div>
    }

    <div class="section">
        <h4>Gerador de Números</h4>

        @if (isGenerating)
        {
            <div class="clover-loading-group">
                @for (int i = 0; i < 6; i++)
                {
                    <div class="clover-small">🍀</div>
                }
            </div>
        }
        else if (generatedNumbers.Count > 0)
        {
            <div class="numbers">
                @foreach (var number in revealedNumbers)
                {
                    <div class="number-ball generated-ball">@number</div>
                }
            </div>
        }

        <div style="text-align:center; margin-top: 1rem;">
            <button @onclick="GenerateNumbers" disabled="@isGenerating">Gerar</button>
        </div>
    </div>

    @if (generatedNumbers.Count == 6 && showSaveButton && savedGames.Count < MaxSavedGames)
    {
        <div style="text-align:center; margin-top:1rem;">
            <button @onclick="SaveCurrentGameAsync">Salvar jogo</button>
        </div>
    }

    <div style="text-align:center; margin-top: 2rem;">
        <button @onclick="LoadSavedGames">Ver jogos salvos</button>
    </div>

    <div class="section">
        <div class="section">
            <button @onclick="OpenLastResultsModal">Ver últimos 5 resultados</button>
        </div>

        @if (showModal)
        {
            <div class="modal-backdrop" @onclick="CloseModal">
                <div class="modal-content" @onclick:stopPropagation>
                    <h2>Últimos 5 Resultados</h2>

                    @if (isLoadingApi)
                    {
                        <div class="clover-loading-group">
                            @for (int i = 0; i < 6; i++)
                            {
                                <div class="clover-small">🍀</div>
                            }
                        </div>
                    }
                    else
                    {
                        @foreach (var result in lastFiveResults)
                        {
                            <div class="result-detail">
                                <p><strong>Concurso:</strong> @result.DrawNumber (@result.Date)</p>
                                <div class="numbers">
                                    @foreach (var n in result.Numbers.OrderBy(n => n))
                                    {
                                        <div class="number-ball">@n</div>
                                    }
                                </div>
                            </div>
                        }
                    }

                    <div style="text-align:center; margin-top:1rem;">
                        <button @onclick="CloseModal">Fechar</button>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (showSavedGamesModal)
    {
        <div class="modal-overlay" @onclick="() => showSavedGamesModal = false">
            <div class="modal" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <h2>Jogos Salvos 🍀</h2>
                    <button class="close-btn" @onclick="() => showSavedGamesModal = false">❌</button>
                </div>

                @if (savedGames.Count == 0)
                {
                    <p>Nenhum jogo salvo ainda.</p>
                }
                else
                {
                    <ul class="card-list">
                        @foreach (var game in savedGames.OrderByDescending(g => g.CreatedAt))
                        {
                            <li class="saved-game">
                                <div>
                                    <span style="font-size: 12px;">@game.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span><br />
                                    <span style="font-weight: bold;">@string.Join(", ", game.Numbers.OrderBy(n => n))</span><br />
                                    <span style="color:@(game.Played ? "green" : "gray"); font-size:12px;">
                                        @(game.Played ? "✅ Jogado" : "⏳ Não jogado")
                                    </span>
                                </div>

                                <div class="saved-actions">
                                    <button @onclick="() => TogglePlayed(game)">
                                        @(game.Played ? "Desmarcar" : "Marcar")
                                    </button>

                                    <button class="delete" @onclick="() => DeleteGame(game)">
                                        Excluir
                                    </button>
                                </div>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
    }

    @if (savedGames.Count > MaxSavedGames)
    {
        <p style="text-align:center; color:orangered;">Limite de 5 jogos salvos atingido.</p>
    }
</div>

@if (showToast)
{
    <div class="toast">
        Jogo salvo com sucesso! 🍀
    </div>
}

@code {
    private List<int> generatedNumbers = new();
    private MegaSenaResult? latestResult;
    private bool isLoadingApi = true;
    private bool isGenerating = false;
    private List<int> revealedNumbers = new();

    private List<MegaSenaResult> lastFiveResults = new();
    private bool showModal = false;

    private bool showSavedGamesModal = false;
    private List<SavedGame> savedGames = new();

    private bool showSaveButton = true;
    private bool showToast = false;
    private const int MaxSavedGames = 5;

    private async Task GenerateNumbers()
    {
        isGenerating = true;
        revealedNumbers.Clear();

        await Task.Delay(600);

        var rand = new Random();
        generatedNumbers = Enumerable
        .Range(1, 60)
        .OrderBy(_ => rand.Next())
        .Take(6)
        .ToList();

        foreach (var number in generatedNumbers.OrderBy(n => n))
        {
            revealedNumbers.Add(number);
            await JS.InvokeVoidAsync("playPlim");
            StateHasChanged();
            await Task.Delay(400);
        }

        isGenerating = false;
        showSaveButton = true;
    }

    protected override async Task OnInitializedAsync()
    {
        isLoadingApi = true;
        latestResult = await MegaSenaService.GetLatestResultAsync();
        isLoadingApi = false;
    }

    private string FormatPrize(double prize)
    {
        return prize.ToString("C2", new System.Globalization.CultureInfo("pt-BR"));
    }

    private async Task OpenLastResultsModal()
    {
        showModal = true;

        if (lastFiveResults.Count == 0)
        {
            isLoadingApi = true;
            lastFiveResults = await MegaSenaService.GetLastResultsAsync(5);
            isLoadingApi = false;
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task LoadSavedGames()
    {
        savedGames = await LocalStorageService.GetSavedGamesAsync();
        showSavedGamesModal = true;
    }

    private async Task DeleteGame(SavedGame game)
    {
        savedGames.Remove(game);
        await LocalStorageService.SaveAllGamesAsync(savedGames);
    }

    private async Task TogglePlayed(SavedGame game)
    {
        game.Played = !game.Played;
        await LocalStorageService.SaveAllGamesAsync(savedGames);
    }

    private async Task SaveCurrentGameAsync()
    {
        var existing = await LocalStorageService.GetSavedGamesAsync();

        if (existing.Count >= MaxSavedGames)
            return;

        var newGame = new SavedGame
        {
            Numbers = new List<int>(generatedNumbers),
            CreatedAt = DateTime.Now,
            Played = false
        };

        await LocalStorageService.SaveGameAsync(newGame);

        showSaveButton = false;
        showToast = true;

        await Task.Delay(2000);
        showToast = false;

        savedGames = await LocalStorageService.GetSavedGamesAsync();

        StateHasChanged();
    }
}
