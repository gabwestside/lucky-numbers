@page "/"

@using MegaSenaBlazor.Services

@inject MegaSenaService MegaSenaService
@inject IJSRuntime JS

<div class="container">
    <audio id="plimSound" src="sounds/plim.mp3" preload="auto"></audio>
    <h2>Gerador da Sorte 🍀</h2>
    <h4>Último Resultado da Mega-Sena</h4>

    @if (isLoadingApi)
    {
        <div class="loading-area">
            <div class="clover-loading-group">
                @for (int i = 0; i < 6; i++)
                {
                    <div class="clover-small">🍀</div>
                }
            </div>
            <div class="loading-message">Buscando último sorteio...</div>
        </div>
    }
    else if (latestResult is not null)
    {
        <div class="result-detail">
            <p><strong>Concurso:</strong> @latestResult.DrawNumber</p>
            <p><strong>Data:</strong> @latestResult.Date</p>

            <div class="numbers">
                @foreach (var number in latestResult.Numbers.OrderBy(n => n))
                {
                    <div class="number-ball">@number</div>
                }
            </div>

            <p><strong>Acumulou:</strong>
                <span style="color:@(latestResult.IsAccumulated ? "green" : "red"); font-weight:bold;">
                    @(latestResult.IsAccumulated ? "SIM" : "NÃO")
                </span>
            </p>

            <p><strong>Próximo Sorteio:</strong> @latestResult.NextDrawDate</p>

            <p><strong>Valor Acumulado:</strong> @FormatPrize(latestResult.NextDrawPrize)</p>
        </div>
    }

    <div class="section">
        <h4>Gerador de Números</h4>

        @if (isGenerating)
        {
            <div class="clover-loading-group">
                @for (int i = 0; i < 6; i++)
                {
                    <div class="clover-small">🍀</div>
                }
            </div>
        }
        else if (generatedNumbers.Count > 0)
        {
            <div class="numbers">
                @foreach (var number in revealedNumbers)
                {
                    <div class="number-ball generated-ball">@number</div>
                }
            </div>
        }

        <div style="text-align:center; margin-top: 1rem;">
            <button @onclick="GenerateNumbers" disabled="@isGenerating">Gerar</button>
        </div>
    </div>

    <div class="section">
        <button @onclick="ToggleLastDraws">
            @(showLastDraws ? "Ocultar últimos 5 resultados" : "Ver últimos 5 resultados")
        </button>

        @if (isLoadingApi && showLastDraws)
        {
            <div class="clover-loading-group">
                @for (int i = 0; i < 6; i++)
                {
                    <div class="clover-small">🍀</div>
                }
            </div>
        }

        @if (showLastDraws && lastFiveResults.Count > 0)
        {
            <div class="results-list">
                @foreach (var result in lastFiveResults)
                {
                    <div class="result-detail">
                        <p><strong>Concurso:</strong> @result.DrawNumber (@result.Date)</p>
                        <div class="numbers">
                            @foreach (var n in result.Numbers.OrderBy(n => n))
                            {
                                <div class="number-ball">@n</div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<int> generatedNumbers = new();
    private MegaSenaResult? latestResult;
    private bool isLoadingApi = true;
    private bool isGenerating = false;
    private List<int> revealedNumbers = new();

    private bool showLastDraws = false;
    private List<MegaSenaResult> lastFiveResults = new();

    private async Task GenerateNumbers()
    {
        isGenerating = true;
        revealedNumbers.Clear();

        await Task.Delay(600);

        var rand = new Random();
        generatedNumbers = Enumerable
        .Range(1, 60)
        .OrderBy(_ => rand.Next())
        .Take(6)
        .ToList();

        foreach (var number in generatedNumbers.OrderBy(n => n))
        {
            revealedNumbers.Add(number);
            await JS.InvokeVoidAsync("playPlim");
            StateHasChanged();
            await Task.Delay(400);
        }

        isGenerating = false;
    }

    protected override async Task OnInitializedAsync()
    {
        isLoadingApi = true;
        latestResult = await MegaSenaService.GetLatestResultAsync();
        isLoadingApi = false;
    }

    private string FormatPrize(double prize)
    {
        return prize.ToString("C2", new System.Globalization.CultureInfo("pt-BR"));
    }

    private async Task ToggleLastDraws()
    {
        showLastDraws = !showLastDraws;

        if (showLastDraws && lastFiveResults.Count == 0)
        {
            isLoadingApi = true;
            lastFiveResults = await MegaSenaService.GetLastResultsAsync(5);
            isLoadingApi = false;
        }
    }
}
